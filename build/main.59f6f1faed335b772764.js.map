{"version":3,"sources":["webpack:///./js/task1.js","webpack:///./js/task2.js","webpack:///./js/task3.js"],"names":["delay","ms","Promise","resolve","reject","console","log","setTimeout","logger","time","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAACC,GASb,OAPgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,QAAQC,IAAI,YAAaH,GACzBI,YAAW,WACTJ,EAAQF,KACPA,OAMDO,EAAS,SAACC,GAAD,OAAUJ,QAAQC,IAAR,kBAA8BG,EAA9B,OAGzBT,EAAM,KAAMU,KAAKF,GACjBR,EAAM,KAAMU,KAAKF,GACjBR,EAAM,MAAMU,KAAKF,GACjBR,EAAM,KAAMU,KAAKF,G,kCClBXG,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAId,SAAQ,SAAAC,GACjBA,EACEY,EAASE,KAAI,SAAAC,GAAI,OACfA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAM/DV,EAAS,SAAAW,GAAY,OAAId,QAAQe,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKF,GACrCM,EAAgBH,EAAO,OAAOD,KAAKF,GCpBnC,IAIMa,EAAkB,SAAAC,GACtB,OAAO,IAAIpB,SAAQ,SAACC,EAASC,GAC3B,IAN+BmB,EAAKC,EAM9BxB,GANyBuB,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMlDhB,YAAW,WACUkB,KAAKE,SAAW,GAGjCxB,EAAQ,CAAEyB,GAAIN,EAAYM,GAAInB,KAAMT,IAEpCI,EAAOkB,EAAYM,MAEpB5B,OAID6B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAInB,EAAW,EAAXA,KACxBJ,QAAQC,IAAR,eAA2BsB,EAA3B,iBAA8CnB,EAA9C,OAGIqB,EAAW,SAAAF,GACfvB,QAAQ0B,KAAR,gCAA6CH,EAA7C,8BAGFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOtB,KAAKmB,GAAYI,MAAMH,GAEhET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOtB,KAAKmB,GAAYI,MAAMH,GAEhET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAAMtB,KAAKmB,GAAYI,MAAMH,GAE/DT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOtB,KAAKmB,GAAYI,MAAMH,K","file":"main.59f6f1faed335b772764.js","sourcesContent":["const delay = (ms) => {\r\n  // Твой код\r\n  const promise = new Promise((resolve, reject) => {\r\n    console.log(\"resolse: \", resolve);\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n\r\n  return promise;\r\n};\r\n\r\nconst logger = (time) => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\ndelay(5000).then(logger); // Resolved after 1500ms\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    resolve(\r\n      allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      ),\r\n    );\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"],"sourceRoot":""}